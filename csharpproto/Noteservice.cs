// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: noteservice.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ehr.Noteservice {

  /// <summary>Holder for reflection information generated from noteservice.proto</summary>
  public static partial class NoteserviceReflection {

    #region Descriptor
    /// <summary>File descriptor for noteservice.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NoteserviceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFub3Rlc2VydmljZS5wcm90bxIPZWhyLm5vdGVzZXJ2aWNlGgpub3RlLnBy",
            "b3RvGgpodHRwLnByb3RvIlYKGU5vdGVTZXJ2aWNlUmVzcG9uc2VTdGF0dXMS",
            "KAoJaHR0cF9jb2RlGAEgASgOMhUuZWhyLmh0dHAuU3RhdHVzQ29kZXMSDwoH",
            "bWVzc2FnZRgCIAEoCSIxChFDcmVhdGVOb3RlUmVxdWVzdBIcCgRub3RlGAEg",
            "ASgLMg4uZWhyLm5vdGUuTm90ZSJuChJDcmVhdGVOb3RlUmVzcG9uc2USOgoG",
            "c3RhdHVzGAEgASgLMiouZWhyLm5vdGVzZXJ2aWNlLk5vdGVTZXJ2aWNlUmVz",
            "cG9uc2VTdGF0dXMSHAoEbm90ZRgCIAEoCzIOLmVoci5ub3RlLk5vdGUiHwoR",
            "RGVsZXRlTm90ZVJlcXVlc3QSCgoCaWQYASABKAUiUAoSRGVsZXRlTm90ZVJl",
            "c3BvbnNlEjoKBnN0YXR1cxgBIAEoCzIqLmVoci5ub3Rlc2VydmljZS5Ob3Rl",
            "U2VydmljZVJlc3BvbnNlU3RhdHVzIiEKE1JldHJpZXZlTm90ZVJlcXVlc3QS",
            "CgoCaWQYASABKAUicAoUUmV0cmlldmVOb3RlUmVzcG9uc2USOgoGc3RhdHVz",
            "GAEgASgLMiouZWhyLm5vdGVzZXJ2aWNlLk5vdGVTZXJ2aWNlUmVzcG9uc2VT",
            "dGF0dXMSHAoEbm90ZRgCIAEoCzIOLmVoci5ub3RlLk5vdGUiZgoPRmluZE5v",
            "dGVSZXF1ZXN0EhQKDHNlYXJjaF90ZXJtcxgBIAEoCRITCgthdXRob3JfZ3Vp",
            "ZBgCIAEoCRIUCgxwYXRpZW50X2d1aWQYAyABKAkSEgoKdmlzaXRfZ3VpZBgE",
            "IAEoCSJsChBGaW5kTm90ZVJlc3BvbnNlEjoKBnN0YXR1cxgBIAEoCzIqLmVo",
            "ci5ub3Rlc2VydmljZS5Ob3RlU2VydmljZVJlc3BvbnNlU3RhdHVzEhwKBG5v",
            "dGUYAiADKAsyDi5laHIubm90ZS5Ob3RlIj0KEVVwZGF0ZU5vdGVSZXF1ZXN0",
            "EgoKAmlkGAEgASgFEhwKBG5vdGUYAiABKAsyDi5laHIubm90ZS5Ob3RlIlAK",
            "ElVwZGF0ZU5vdGVSZXNwb25zZRI6CgZzdGF0dXMYASABKAsyKi5laHIubm90",
            "ZXNlcnZpY2UuTm90ZVNlcnZpY2VSZXNwb25zZVN0YXR1czLHAwoLTm90ZVNl",
            "cnZpY2USVAoHTmV3Tm90ZRIiLmVoci5ub3Rlc2VydmljZS5DcmVhdGVOb3Rl",
            "UmVxdWVzdBojLmVoci5ub3Rlc2VydmljZS5DcmVhdGVOb3RlUmVzcG9uc2Ui",
            "ABJXCgpEZWxldGVOb3RlEiIuZWhyLm5vdGVzZXJ2aWNlLkRlbGV0ZU5vdGVS",
            "ZXF1ZXN0GiMuZWhyLm5vdGVzZXJ2aWNlLkRlbGV0ZU5vdGVSZXNwb25zZSIA",
            "El0KDFJldHJpZXZlTm90ZRIkLmVoci5ub3Rlc2VydmljZS5SZXRyaWV2ZU5v",
            "dGVSZXF1ZXN0GiUuZWhyLm5vdGVzZXJ2aWNlLlJldHJpZXZlTm90ZVJlc3Bv",
            "bnNlIgASUQoIRmluZE5vdGUSIC5laHIubm90ZXNlcnZpY2UuRmluZE5vdGVS",
            "ZXF1ZXN0GiEuZWhyLm5vdGVzZXJ2aWNlLkZpbmROb3RlUmVzcG9uc2UiABJX",
            "CgpVcGRhdGVOb3RlEiIuZWhyLm5vdGVzZXJ2aWNlLlVwZGF0ZU5vdGVSZXF1",
            "ZXN0GiMuZWhyLm5vdGVzZXJ2aWNlLlVwZGF0ZU5vdGVSZXNwb25zZSIAQgda",
            "BWVocnBiYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Ehr.Note.NoteReflection.Descriptor, global::Ehr.Http.HttpReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ehr.Noteservice.NoteServiceResponseStatus), global::Ehr.Noteservice.NoteServiceResponseStatus.Parser, new[]{ "HttpCode", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ehr.Noteservice.CreateNoteRequest), global::Ehr.Noteservice.CreateNoteRequest.Parser, new[]{ "Note" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ehr.Noteservice.CreateNoteResponse), global::Ehr.Noteservice.CreateNoteResponse.Parser, new[]{ "Status", "Note" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ehr.Noteservice.DeleteNoteRequest), global::Ehr.Noteservice.DeleteNoteRequest.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ehr.Noteservice.DeleteNoteResponse), global::Ehr.Noteservice.DeleteNoteResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ehr.Noteservice.RetrieveNoteRequest), global::Ehr.Noteservice.RetrieveNoteRequest.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ehr.Noteservice.RetrieveNoteResponse), global::Ehr.Noteservice.RetrieveNoteResponse.Parser, new[]{ "Status", "Note" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ehr.Noteservice.FindNoteRequest), global::Ehr.Noteservice.FindNoteRequest.Parser, new[]{ "SearchTerms", "AuthorGuid", "PatientGuid", "VisitGuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ehr.Noteservice.FindNoteResponse), global::Ehr.Noteservice.FindNoteResponse.Parser, new[]{ "Status", "Note" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ehr.Noteservice.UpdateNoteRequest), global::Ehr.Noteservice.UpdateNoteRequest.Parser, new[]{ "Id", "Note" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ehr.Noteservice.UpdateNoteResponse), global::Ehr.Noteservice.UpdateNoteResponse.Parser, new[]{ "Status" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class NoteServiceResponseStatus : pb::IMessage<NoteServiceResponseStatus> {
    private static readonly pb::MessageParser<NoteServiceResponseStatus> _parser = new pb::MessageParser<NoteServiceResponseStatus>(() => new NoteServiceResponseStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoteServiceResponseStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ehr.Noteservice.NoteserviceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoteServiceResponseStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoteServiceResponseStatus(NoteServiceResponseStatus other) : this() {
      httpCode_ = other.httpCode_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoteServiceResponseStatus Clone() {
      return new NoteServiceResponseStatus(this);
    }

    /// <summary>Field number for the "http_code" field.</summary>
    public const int HttpCodeFieldNumber = 1;
    private global::Ehr.Http.StatusCodes httpCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ehr.Http.StatusCodes HttpCode {
      get { return httpCode_; }
      set {
        httpCode_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoteServiceResponseStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoteServiceResponseStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HttpCode != other.HttpCode) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HttpCode != 0) hash ^= HttpCode.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HttpCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) HttpCode);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HttpCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HttpCode);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoteServiceResponseStatus other) {
      if (other == null) {
        return;
      }
      if (other.HttpCode != 0) {
        HttpCode = other.HttpCode;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            httpCode_ = (global::Ehr.Http.StatusCodes) input.ReadEnum();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateNoteRequest : pb::IMessage<CreateNoteRequest> {
    private static readonly pb::MessageParser<CreateNoteRequest> _parser = new pb::MessageParser<CreateNoteRequest>(() => new CreateNoteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateNoteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ehr.Noteservice.NoteserviceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNoteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNoteRequest(CreateNoteRequest other) : this() {
      note_ = other.note_ != null ? other.note_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNoteRequest Clone() {
      return new CreateNoteRequest(this);
    }

    /// <summary>Field number for the "note" field.</summary>
    public const int NoteFieldNumber = 1;
    private global::Ehr.Note.Note note_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ehr.Note.Note Note {
      get { return note_; }
      set {
        note_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateNoteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateNoteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Note, other.Note)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (note_ != null) hash ^= Note.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (note_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Note);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (note_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Note);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateNoteRequest other) {
      if (other == null) {
        return;
      }
      if (other.note_ != null) {
        if (note_ == null) {
          note_ = new global::Ehr.Note.Note();
        }
        Note.MergeFrom(other.Note);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (note_ == null) {
              note_ = new global::Ehr.Note.Note();
            }
            input.ReadMessage(note_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateNoteResponse : pb::IMessage<CreateNoteResponse> {
    private static readonly pb::MessageParser<CreateNoteResponse> _parser = new pb::MessageParser<CreateNoteResponse>(() => new CreateNoteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateNoteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ehr.Noteservice.NoteserviceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNoteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNoteResponse(CreateNoteResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      note_ = other.note_ != null ? other.note_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNoteResponse Clone() {
      return new CreateNoteResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Ehr.Noteservice.NoteServiceResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ehr.Noteservice.NoteServiceResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "note" field.</summary>
    public const int NoteFieldNumber = 2;
    private global::Ehr.Note.Note note_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ehr.Note.Note Note {
      get { return note_; }
      set {
        note_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateNoteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateNoteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (!object.Equals(Note, other.Note)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (note_ != null) hash ^= Note.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (note_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Note);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (note_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Note);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateNoteResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Ehr.Noteservice.NoteServiceResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.note_ != null) {
        if (note_ == null) {
          note_ = new global::Ehr.Note.Note();
        }
        Note.MergeFrom(other.Note);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Ehr.Noteservice.NoteServiceResponseStatus();
            }
            input.ReadMessage(status_);
            break;
          }
          case 18: {
            if (note_ == null) {
              note_ = new global::Ehr.Note.Note();
            }
            input.ReadMessage(note_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteNoteRequest : pb::IMessage<DeleteNoteRequest> {
    private static readonly pb::MessageParser<DeleteNoteRequest> _parser = new pb::MessageParser<DeleteNoteRequest>(() => new DeleteNoteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteNoteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ehr.Noteservice.NoteserviceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNoteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNoteRequest(DeleteNoteRequest other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNoteRequest Clone() {
      return new DeleteNoteRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteNoteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteNoteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteNoteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteNoteResponse : pb::IMessage<DeleteNoteResponse> {
    private static readonly pb::MessageParser<DeleteNoteResponse> _parser = new pb::MessageParser<DeleteNoteResponse>(() => new DeleteNoteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteNoteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ehr.Noteservice.NoteserviceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNoteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNoteResponse(DeleteNoteResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNoteResponse Clone() {
      return new DeleteNoteResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Ehr.Noteservice.NoteServiceResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ehr.Noteservice.NoteServiceResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteNoteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteNoteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteNoteResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Ehr.Noteservice.NoteServiceResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Ehr.Noteservice.NoteServiceResponseStatus();
            }
            input.ReadMessage(status_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RetrieveNoteRequest : pb::IMessage<RetrieveNoteRequest> {
    private static readonly pb::MessageParser<RetrieveNoteRequest> _parser = new pb::MessageParser<RetrieveNoteRequest>(() => new RetrieveNoteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RetrieveNoteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ehr.Noteservice.NoteserviceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetrieveNoteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetrieveNoteRequest(RetrieveNoteRequest other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetrieveNoteRequest Clone() {
      return new RetrieveNoteRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RetrieveNoteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RetrieveNoteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RetrieveNoteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RetrieveNoteResponse : pb::IMessage<RetrieveNoteResponse> {
    private static readonly pb::MessageParser<RetrieveNoteResponse> _parser = new pb::MessageParser<RetrieveNoteResponse>(() => new RetrieveNoteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RetrieveNoteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ehr.Noteservice.NoteserviceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetrieveNoteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetrieveNoteResponse(RetrieveNoteResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      note_ = other.note_ != null ? other.note_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RetrieveNoteResponse Clone() {
      return new RetrieveNoteResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Ehr.Noteservice.NoteServiceResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ehr.Noteservice.NoteServiceResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "note" field.</summary>
    public const int NoteFieldNumber = 2;
    private global::Ehr.Note.Note note_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ehr.Note.Note Note {
      get { return note_; }
      set {
        note_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RetrieveNoteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RetrieveNoteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (!object.Equals(Note, other.Note)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (note_ != null) hash ^= Note.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (note_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Note);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (note_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Note);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RetrieveNoteResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Ehr.Noteservice.NoteServiceResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.note_ != null) {
        if (note_ == null) {
          note_ = new global::Ehr.Note.Note();
        }
        Note.MergeFrom(other.Note);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Ehr.Noteservice.NoteServiceResponseStatus();
            }
            input.ReadMessage(status_);
            break;
          }
          case 18: {
            if (note_ == null) {
              note_ = new global::Ehr.Note.Note();
            }
            input.ReadMessage(note_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FindNoteRequest : pb::IMessage<FindNoteRequest> {
    private static readonly pb::MessageParser<FindNoteRequest> _parser = new pb::MessageParser<FindNoteRequest>(() => new FindNoteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FindNoteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ehr.Noteservice.NoteserviceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindNoteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindNoteRequest(FindNoteRequest other) : this() {
      searchTerms_ = other.searchTerms_;
      authorGuid_ = other.authorGuid_;
      patientGuid_ = other.patientGuid_;
      visitGuid_ = other.visitGuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindNoteRequest Clone() {
      return new FindNoteRequest(this);
    }

    /// <summary>Field number for the "search_terms" field.</summary>
    public const int SearchTermsFieldNumber = 1;
    private string searchTerms_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SearchTerms {
      get { return searchTerms_; }
      set {
        searchTerms_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "author_guid" field.</summary>
    public const int AuthorGuidFieldNumber = 2;
    private string authorGuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthorGuid {
      get { return authorGuid_; }
      set {
        authorGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "patient_guid" field.</summary>
    public const int PatientGuidFieldNumber = 3;
    private string patientGuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatientGuid {
      get { return patientGuid_; }
      set {
        patientGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "visit_guid" field.</summary>
    public const int VisitGuidFieldNumber = 4;
    private string visitGuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VisitGuid {
      get { return visitGuid_; }
      set {
        visitGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FindNoteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FindNoteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SearchTerms != other.SearchTerms) return false;
      if (AuthorGuid != other.AuthorGuid) return false;
      if (PatientGuid != other.PatientGuid) return false;
      if (VisitGuid != other.VisitGuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SearchTerms.Length != 0) hash ^= SearchTerms.GetHashCode();
      if (AuthorGuid.Length != 0) hash ^= AuthorGuid.GetHashCode();
      if (PatientGuid.Length != 0) hash ^= PatientGuid.GetHashCode();
      if (VisitGuid.Length != 0) hash ^= VisitGuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SearchTerms.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SearchTerms);
      }
      if (AuthorGuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AuthorGuid);
      }
      if (PatientGuid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PatientGuid);
      }
      if (VisitGuid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(VisitGuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SearchTerms.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SearchTerms);
      }
      if (AuthorGuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthorGuid);
      }
      if (PatientGuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatientGuid);
      }
      if (VisitGuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VisitGuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FindNoteRequest other) {
      if (other == null) {
        return;
      }
      if (other.SearchTerms.Length != 0) {
        SearchTerms = other.SearchTerms;
      }
      if (other.AuthorGuid.Length != 0) {
        AuthorGuid = other.AuthorGuid;
      }
      if (other.PatientGuid.Length != 0) {
        PatientGuid = other.PatientGuid;
      }
      if (other.VisitGuid.Length != 0) {
        VisitGuid = other.VisitGuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SearchTerms = input.ReadString();
            break;
          }
          case 18: {
            AuthorGuid = input.ReadString();
            break;
          }
          case 26: {
            PatientGuid = input.ReadString();
            break;
          }
          case 34: {
            VisitGuid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FindNoteResponse : pb::IMessage<FindNoteResponse> {
    private static readonly pb::MessageParser<FindNoteResponse> _parser = new pb::MessageParser<FindNoteResponse>(() => new FindNoteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FindNoteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ehr.Noteservice.NoteserviceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindNoteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindNoteResponse(FindNoteResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      note_ = other.note_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindNoteResponse Clone() {
      return new FindNoteResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Ehr.Noteservice.NoteServiceResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ehr.Noteservice.NoteServiceResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "note" field.</summary>
    public const int NoteFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Ehr.Note.Note> _repeated_note_codec
        = pb::FieldCodec.ForMessage(18, global::Ehr.Note.Note.Parser);
    private readonly pbc::RepeatedField<global::Ehr.Note.Note> note_ = new pbc::RepeatedField<global::Ehr.Note.Note>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ehr.Note.Note> Note {
      get { return note_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FindNoteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FindNoteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if(!note_.Equals(other.note_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      hash ^= note_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      note_.WriteTo(output, _repeated_note_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      size += note_.CalculateSize(_repeated_note_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FindNoteResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Ehr.Noteservice.NoteServiceResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      note_.Add(other.note_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Ehr.Noteservice.NoteServiceResponseStatus();
            }
            input.ReadMessage(status_);
            break;
          }
          case 18: {
            note_.AddEntriesFrom(input, _repeated_note_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateNoteRequest : pb::IMessage<UpdateNoteRequest> {
    private static readonly pb::MessageParser<UpdateNoteRequest> _parser = new pb::MessageParser<UpdateNoteRequest>(() => new UpdateNoteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateNoteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ehr.Noteservice.NoteserviceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNoteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNoteRequest(UpdateNoteRequest other) : this() {
      id_ = other.id_;
      note_ = other.note_ != null ? other.note_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNoteRequest Clone() {
      return new UpdateNoteRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "note" field.</summary>
    public const int NoteFieldNumber = 2;
    private global::Ehr.Note.Note note_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ehr.Note.Note Note {
      get { return note_; }
      set {
        note_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateNoteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateNoteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Note, other.Note)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (note_ != null) hash ^= Note.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (note_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Note);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (note_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Note);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateNoteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.note_ != null) {
        if (note_ == null) {
          note_ = new global::Ehr.Note.Note();
        }
        Note.MergeFrom(other.Note);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (note_ == null) {
              note_ = new global::Ehr.Note.Note();
            }
            input.ReadMessage(note_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateNoteResponse : pb::IMessage<UpdateNoteResponse> {
    private static readonly pb::MessageParser<UpdateNoteResponse> _parser = new pb::MessageParser<UpdateNoteResponse>(() => new UpdateNoteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateNoteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ehr.Noteservice.NoteserviceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNoteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNoteResponse(UpdateNoteResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNoteResponse Clone() {
      return new UpdateNoteResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Ehr.Noteservice.NoteServiceResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ehr.Noteservice.NoteServiceResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateNoteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateNoteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateNoteResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Ehr.Noteservice.NoteServiceResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Ehr.Noteservice.NoteServiceResponseStatus();
            }
            input.ReadMessage(status_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
