// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: note.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Note.pbobjc.h"
#import "Medicalissues.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - NoteRoot

@implementation NoteRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - NoteRoot_FileDescriptor

static GPBFileDescriptor *NoteRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"ehr.note"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum NoteType

GPBEnumDescriptor *NoteType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NoNoteType\000FollowUp\000PhoneCall\000ContinuedC"
        "areDocumentation\000RefillDocumentation\000Int"
        "ake\000Procedure\000HistoryAndPhysical\000";
    static const int32_t values[] = {
        NoteType_NoNoteType,
        NoteType_FollowUp,
        NoteType_PhoneCall,
        NoteType_ContinuedCareDocumentation,
        NoteType_RefillDocumentation,
        NoteType_Intake,
        NoteType_Procedure,
        NoteType_HistoryAndPhysical,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(NoteType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:NoteType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL NoteType_IsValidValue(int32_t value__) {
  switch (value__) {
    case NoteType_NoNoteType:
    case NoteType_FollowUp:
    case NoteType_PhoneCall:
    case NoteType_ContinuedCareDocumentation:
    case NoteType_RefillDocumentation:
    case NoteType_Intake:
    case NoteType_Procedure:
    case NoteType_HistoryAndPhysical:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum FragmentType

GPBEnumDescriptor *FragmentType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NoTopic\000Subjective\000ReviewOfSystems\000Medic"
        "alHistory\000Allergies\000Medications\000FamilyHi"
        "story\000SocialHistory\000Vitals\000PhysicalExam\000"
        "LaboratoryData\000MedicalProblem\000";
    static const int32_t values[] = {
        FragmentType_NoTopic,
        FragmentType_Subjective,
        FragmentType_ReviewOfSystems,
        FragmentType_MedicalHistory,
        FragmentType_Allergies,
        FragmentType_Medications,
        FragmentType_FamilyHistory,
        FragmentType_SocialHistory,
        FragmentType_Vitals,
        FragmentType_PhysicalExam,
        FragmentType_LaboratoryData,
        FragmentType_MedicalProblem,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(FragmentType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:FragmentType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL FragmentType_IsValidValue(int32_t value__) {
  switch (value__) {
    case FragmentType_NoTopic:
    case FragmentType_Subjective:
    case FragmentType_ReviewOfSystems:
    case FragmentType_MedicalHistory:
    case FragmentType_Allergies:
    case FragmentType_Medications:
    case FragmentType_FamilyHistory:
    case FragmentType_SocialHistory:
    case FragmentType_Vitals:
    case FragmentType_PhysicalExam:
    case FragmentType_LaboratoryData:
    case FragmentType_MedicalProblem:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum RecordPriority

GPBEnumDescriptor *RecordPriority_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NoPriority\000High\000Normal\000Low\000";
    static const int32_t values[] = {
        RecordPriority_NoPriority,
        RecordPriority_High,
        RecordPriority_Normal,
        RecordPriority_Low,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RecordPriority)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RecordPriority_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RecordPriority_IsValidValue(int32_t value__) {
  switch (value__) {
    case RecordPriority_NoPriority:
    case RecordPriority_High:
    case RecordPriority_Normal:
    case RecordPriority_Low:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum RecordStatus

GPBEnumDescriptor *RecordStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NoStatus\000Incomplete\000Active\000Replaced\000Dele"
        "ted\000";
    static const int32_t values[] = {
        RecordStatus_NoStatus,
        RecordStatus_Incomplete,
        RecordStatus_Active,
        RecordStatus_Replaced,
        RecordStatus_Deleted,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RecordStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RecordStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RecordStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case RecordStatus_NoStatus:
    case RecordStatus_Incomplete:
    case RecordStatus_Active:
    case RecordStatus_Replaced:
    case RecordStatus_Deleted:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Note

@implementation Note

@dynamic id_p;
@dynamic hasDateCreated, dateCreated;
@dynamic noteGuid;
@dynamic visitGuid;
@dynamic authorGuid;
@dynamic patientGuid;
@dynamic type;
@dynamic status;
@dynamic fragmentsArray, fragmentsArray_Count;
@dynamic tagsArray, tagsArray_Count;

typedef struct Note__storage_ {
  uint32_t _has_storage_[1];
  NoteType type;
  RecordStatus status;
  GPBTimestamp *dateCreated;
  NSString *noteGuid;
  NSString *visitGuid;
  NSString *authorGuid;
  NSString *patientGuid;
  NSMutableArray *fragmentsArray;
  NSMutableArray *tagsArray;
  int64_t id_p;
} Note__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Note_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Note__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "dateCreated",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = Note_FieldNumber_DateCreated,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Note__storage_, dateCreated),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "noteGuid",
        .dataTypeSpecific.className = NULL,
        .number = Note_FieldNumber_NoteGuid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Note__storage_, noteGuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "visitGuid",
        .dataTypeSpecific.className = NULL,
        .number = Note_FieldNumber_VisitGuid,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Note__storage_, visitGuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "authorGuid",
        .dataTypeSpecific.className = NULL,
        .number = Note_FieldNumber_AuthorGuid,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Note__storage_, authorGuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "patientGuid",
        .dataTypeSpecific.className = NULL,
        .number = Note_FieldNumber_PatientGuid,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Note__storage_, patientGuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = NoteType_EnumDescriptor,
        .number = Note_FieldNumber_Type,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Note__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = RecordStatus_EnumDescriptor,
        .number = Note_FieldNumber_Status,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Note__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "fragmentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(NoteFragment),
        .number = Note_FieldNumber_FragmentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Note__storage_, fragmentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tagsArray",
        .dataTypeSpecific.className = NULL,
        .number = Note_FieldNumber_TagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Note__storage_, tagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Note class]
                                     rootClass:[NoteRoot class]
                                          file:NoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Note__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Note_Type_RawValue(Note *message) {
  GPBDescriptor *descriptor = [Note descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Note_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetNote_Type_RawValue(Note *message, int32_t value) {
  GPBDescriptor *descriptor = [Note descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Note_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t Note_Status_RawValue(Note *message) {
  GPBDescriptor *descriptor = [Note descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Note_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetNote_Status_RawValue(Note *message, int32_t value) {
  GPBDescriptor *descriptor = [Note descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Note_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - NoteFragment

@implementation NoteFragment

@dynamic id_p;
@dynamic hasDateCreated, dateCreated;
@dynamic noteFragmentGuid;
@dynamic noteGuid;
@dynamic issueGuid;
@dynamic icd10Code;
@dynamic icd10Long;
@dynamic description_p;
@dynamic status;
@dynamic priority;
@dynamic topic;
@dynamic content;
@dynamic tagsArray, tagsArray_Count;

typedef struct NoteFragment__storage_ {
  uint32_t _has_storage_[1];
  RecordStatus status;
  RecordPriority priority;
  FragmentType topic;
  GPBTimestamp *dateCreated;
  NSString *noteFragmentGuid;
  NSString *noteGuid;
  NSString *issueGuid;
  NSString *icd10Code;
  NSString *icd10Long;
  NSString *description_p;
  NSString *content;
  NSMutableArray *tagsArray;
  int64_t id_p;
} NoteFragment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = NoteFragment_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NoteFragment__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "dateCreated",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = NoteFragment_FieldNumber_DateCreated,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NoteFragment__storage_, dateCreated),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "noteFragmentGuid",
        .dataTypeSpecific.className = NULL,
        .number = NoteFragment_FieldNumber_NoteFragmentGuid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NoteFragment__storage_, noteFragmentGuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "noteGuid",
        .dataTypeSpecific.className = NULL,
        .number = NoteFragment_FieldNumber_NoteGuid,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(NoteFragment__storage_, noteGuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "issueGuid",
        .dataTypeSpecific.className = NULL,
        .number = NoteFragment_FieldNumber_IssueGuid,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(NoteFragment__storage_, issueGuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icd10Code",
        .dataTypeSpecific.className = NULL,
        .number = NoteFragment_FieldNumber_Icd10Code,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(NoteFragment__storage_, icd10Code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icd10Long",
        .dataTypeSpecific.className = NULL,
        .number = NoteFragment_FieldNumber_Icd10Long,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(NoteFragment__storage_, icd10Long),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = NoteFragment_FieldNumber_Description_p,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(NoteFragment__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = RecordStatus_EnumDescriptor,
        .number = NoteFragment_FieldNumber_Status,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(NoteFragment__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "priority",
        .dataTypeSpecific.enumDescFunc = RecordPriority_EnumDescriptor,
        .number = NoteFragment_FieldNumber_Priority,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(NoteFragment__storage_, priority),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "topic",
        .dataTypeSpecific.enumDescFunc = FragmentType_EnumDescriptor,
        .number = NoteFragment_FieldNumber_Topic,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(NoteFragment__storage_, topic),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = NoteFragment_FieldNumber_Content,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(NoteFragment__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tagsArray",
        .dataTypeSpecific.className = NULL,
        .number = NoteFragment_FieldNumber_TagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NoteFragment__storage_, tagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NoteFragment class]
                                     rootClass:[NoteRoot class]
                                          file:NoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NoteFragment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\006\003\202\244\000\007\003\202\244\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t NoteFragment_Status_RawValue(NoteFragment *message) {
  GPBDescriptor *descriptor = [NoteFragment descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NoteFragment_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetNoteFragment_Status_RawValue(NoteFragment *message, int32_t value) {
  GPBDescriptor *descriptor = [NoteFragment descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NoteFragment_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t NoteFragment_Priority_RawValue(NoteFragment *message) {
  GPBDescriptor *descriptor = [NoteFragment descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NoteFragment_FieldNumber_Priority];
  return GPBGetMessageInt32Field(message, field);
}

void SetNoteFragment_Priority_RawValue(NoteFragment *message, int32_t value) {
  GPBDescriptor *descriptor = [NoteFragment descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NoteFragment_FieldNumber_Priority];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t NoteFragment_Topic_RawValue(NoteFragment *message) {
  GPBDescriptor *descriptor = [NoteFragment descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NoteFragment_FieldNumber_Topic];
  return GPBGetMessageInt32Field(message, field);
}

void SetNoteFragment_Topic_RawValue(NoteFragment *message, int32_t value) {
  GPBDescriptor *descriptor = [NoteFragment descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NoteFragment_FieldNumber_Topic];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
