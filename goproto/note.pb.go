// Code generated by protoc-gen-go. DO NOT EDIT.
// source: note.proto

package ehrpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NoteType int32

const (
	NoteType_NO_NOTE_TYPE                 NoteType = 0
	NoteType_FOLLOW_UP                    NoteType = 1
	NoteType_PHONE_CALL                   NoteType = 2
	NoteType_CONTINUED_CARE_DOCUMENTATION NoteType = 4
	NoteType_REFILL_DOCUMENTATION         NoteType = 5
	NoteType_INTAKE                       NoteType = 6
	NoteType_PROCEDURE                    NoteType = 7
	NoteType_HISTORY_AND_PHYSICAL         NoteType = 8
)

var NoteType_name = map[int32]string{
	0: "NO_NOTE_TYPE",
	1: "FOLLOW_UP",
	2: "PHONE_CALL",
	4: "CONTINUED_CARE_DOCUMENTATION",
	5: "REFILL_DOCUMENTATION",
	6: "INTAKE",
	7: "PROCEDURE",
	8: "HISTORY_AND_PHYSICAL",
}
var NoteType_value = map[string]int32{
	"NO_NOTE_TYPE":                 0,
	"FOLLOW_UP":                    1,
	"PHONE_CALL":                   2,
	"CONTINUED_CARE_DOCUMENTATION": 4,
	"REFILL_DOCUMENTATION":         5,
	"INTAKE":                       6,
	"PROCEDURE":                    7,
	"HISTORY_AND_PHYSICAL":         8,
}

func (x NoteType) String() string {
	return proto.EnumName(NoteType_name, int32(x))
}
func (NoteType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_note_2a00892bb07982f0, []int{0}
}

type FragmentType int32

const (
	FragmentType_NO_TOPIC          FragmentType = 0
	FragmentType_SUBJECTIVE        FragmentType = 1
	FragmentType_REVIEW_OF_SYSTEMS FragmentType = 2
	FragmentType_MEDICAL_HISTORY   FragmentType = 3
	FragmentType_ALLERGIES         FragmentType = 4
	FragmentType_MEDICATIONS       FragmentType = 5
	FragmentType_FAMILY_HISTORY    FragmentType = 6
	FragmentType_SOCIAL_HISTORY    FragmentType = 7
	FragmentType_VITALS            FragmentType = 8
	FragmentType_PHYSICAL_EXAM     FragmentType = 9
	FragmentType_LABORATORY_DATA   FragmentType = 10
	FragmentType_MEDICAL_PROBLEM   FragmentType = 11
)

var FragmentType_name = map[int32]string{
	0:  "NO_TOPIC",
	1:  "SUBJECTIVE",
	2:  "REVIEW_OF_SYSTEMS",
	3:  "MEDICAL_HISTORY",
	4:  "ALLERGIES",
	5:  "MEDICATIONS",
	6:  "FAMILY_HISTORY",
	7:  "SOCIAL_HISTORY",
	8:  "VITALS",
	9:  "PHYSICAL_EXAM",
	10: "LABORATORY_DATA",
	11: "MEDICAL_PROBLEM",
}
var FragmentType_value = map[string]int32{
	"NO_TOPIC":          0,
	"SUBJECTIVE":        1,
	"REVIEW_OF_SYSTEMS": 2,
	"MEDICAL_HISTORY":   3,
	"ALLERGIES":         4,
	"MEDICATIONS":       5,
	"FAMILY_HISTORY":    6,
	"SOCIAL_HISTORY":    7,
	"VITALS":            8,
	"PHYSICAL_EXAM":     9,
	"LABORATORY_DATA":   10,
	"MEDICAL_PROBLEM":   11,
}

func (x FragmentType) String() string {
	return proto.EnumName(FragmentType_name, int32(x))
}
func (FragmentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_note_2a00892bb07982f0, []int{1}
}

type RecordPriority int32

const (
	RecordPriority_NO_PRIORITY RecordPriority = 0
	RecordPriority_HIGH        RecordPriority = 1
	RecordPriority_NORMAL      RecordPriority = 2
	RecordPriority_LOW         RecordPriority = 3
)

var RecordPriority_name = map[int32]string{
	0: "NO_PRIORITY",
	1: "HIGH",
	2: "NORMAL",
	3: "LOW",
}
var RecordPriority_value = map[string]int32{
	"NO_PRIORITY": 0,
	"HIGH":        1,
	"NORMAL":      2,
	"LOW":         3,
}

func (x RecordPriority) String() string {
	return proto.EnumName(RecordPriority_name, int32(x))
}
func (RecordPriority) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_note_2a00892bb07982f0, []int{2}
}

type RecordStatus int32

const (
	RecordStatus_NO_STATUS  RecordStatus = 0
	RecordStatus_INCOMPLETE RecordStatus = 1
	RecordStatus_ACTIVE     RecordStatus = 2
	RecordStatus_REPLACED   RecordStatus = 3
	RecordStatus_DELETED    RecordStatus = 4
)

var RecordStatus_name = map[int32]string{
	0: "NO_STATUS",
	1: "INCOMPLETE",
	2: "ACTIVE",
	3: "REPLACED",
	4: "DELETED",
}
var RecordStatus_value = map[string]int32{
	"NO_STATUS":  0,
	"INCOMPLETE": 1,
	"ACTIVE":     2,
	"REPLACED":   3,
	"DELETED":    4,
}

func (x RecordStatus) String() string {
	return proto.EnumName(RecordStatus_name, int32(x))
}
func (RecordStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_note_2a00892bb07982f0, []int{3}
}

type Note struct {
	Id                   int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DateCreated          *timestamp.Timestamp `protobuf:"bytes,2,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	NoteGuid             string               `protobuf:"bytes,3,opt,name=note_guid,json=noteGuid,proto3" json:"note_guid,omitempty"`
	VisitGuid            string               `protobuf:"bytes,4,opt,name=visit_guid,json=visitGuid,proto3" json:"visit_guid,omitempty"`
	AuthorGuid           string               `protobuf:"bytes,5,opt,name=author_guid,json=authorGuid,proto3" json:"author_guid,omitempty"`
	PatientGuid          string               `protobuf:"bytes,6,opt,name=patient_guid,json=patientGuid,proto3" json:"patient_guid,omitempty"`
	Type                 NoteType             `protobuf:"varint,7,opt,name=type,proto3,enum=ehr.note.NoteType" json:"type,omitempty"`
	Status               RecordStatus         `protobuf:"varint,8,opt,name=status,proto3,enum=ehr.note.RecordStatus" json:"status,omitempty"`
	Fragments            []*NoteFragment      `protobuf:"bytes,9,rep,name=fragments,proto3" json:"fragments,omitempty"`
	Tags                 []string             `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Note) Reset()         { *m = Note{} }
func (m *Note) String() string { return proto.CompactTextString(m) }
func (*Note) ProtoMessage()    {}
func (*Note) Descriptor() ([]byte, []int) {
	return fileDescriptor_note_2a00892bb07982f0, []int{0}
}
func (m *Note) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Note.Unmarshal(m, b)
}
func (m *Note) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Note.Marshal(b, m, deterministic)
}
func (dst *Note) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Note.Merge(dst, src)
}
func (m *Note) XXX_Size() int {
	return xxx_messageInfo_Note.Size(m)
}
func (m *Note) XXX_DiscardUnknown() {
	xxx_messageInfo_Note.DiscardUnknown(m)
}

var xxx_messageInfo_Note proto.InternalMessageInfo

func (m *Note) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Note) GetDateCreated() *timestamp.Timestamp {
	if m != nil {
		return m.DateCreated
	}
	return nil
}

func (m *Note) GetNoteGuid() string {
	if m != nil {
		return m.NoteGuid
	}
	return ""
}

func (m *Note) GetVisitGuid() string {
	if m != nil {
		return m.VisitGuid
	}
	return ""
}

func (m *Note) GetAuthorGuid() string {
	if m != nil {
		return m.AuthorGuid
	}
	return ""
}

func (m *Note) GetPatientGuid() string {
	if m != nil {
		return m.PatientGuid
	}
	return ""
}

func (m *Note) GetType() NoteType {
	if m != nil {
		return m.Type
	}
	return NoteType_NO_NOTE_TYPE
}

func (m *Note) GetStatus() RecordStatus {
	if m != nil {
		return m.Status
	}
	return RecordStatus_NO_STATUS
}

func (m *Note) GetFragments() []*NoteFragment {
	if m != nil {
		return m.Fragments
	}
	return nil
}

func (m *Note) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type NoteFragment struct {
	Id                   int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DateCreated          *timestamp.Timestamp `protobuf:"bytes,2,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	NoteFragmentGuid     string               `protobuf:"bytes,3,opt,name=note_fragment_guid,json=noteFragmentGuid,proto3" json:"note_fragment_guid,omitempty"`
	NoteGuid             string               `protobuf:"bytes,4,opt,name=note_guid,json=noteGuid,proto3" json:"note_guid,omitempty"`
	IssueGuid            string               `protobuf:"bytes,5,opt,name=issue_guid,json=issueGuid,proto3" json:"issue_guid,omitempty"`
	Icd_10Code           string               `protobuf:"bytes,6,opt,name=icd_10_code,json=icd10Code,proto3" json:"icd_10_code,omitempty"`
	Icd_10Long           string               `protobuf:"bytes,7,opt,name=icd_10_long,json=icd10Long,proto3" json:"icd_10_long,omitempty"`
	Description          string               `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Status               RecordStatus         `protobuf:"varint,9,opt,name=status,proto3,enum=ehr.note.RecordStatus" json:"status,omitempty"`
	Priority             RecordPriority       `protobuf:"varint,10,opt,name=priority,proto3,enum=ehr.note.RecordPriority" json:"priority,omitempty"`
	Topic                FragmentType         `protobuf:"varint,11,opt,name=topic,proto3,enum=ehr.note.FragmentType" json:"topic,omitempty"`
	Content              string               `protobuf:"bytes,12,opt,name=content,proto3" json:"content,omitempty"`
	Tags                 []string             `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NoteFragment) Reset()         { *m = NoteFragment{} }
func (m *NoteFragment) String() string { return proto.CompactTextString(m) }
func (*NoteFragment) ProtoMessage()    {}
func (*NoteFragment) Descriptor() ([]byte, []int) {
	return fileDescriptor_note_2a00892bb07982f0, []int{1}
}
func (m *NoteFragment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NoteFragment.Unmarshal(m, b)
}
func (m *NoteFragment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NoteFragment.Marshal(b, m, deterministic)
}
func (dst *NoteFragment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoteFragment.Merge(dst, src)
}
func (m *NoteFragment) XXX_Size() int {
	return xxx_messageInfo_NoteFragment.Size(m)
}
func (m *NoteFragment) XXX_DiscardUnknown() {
	xxx_messageInfo_NoteFragment.DiscardUnknown(m)
}

var xxx_messageInfo_NoteFragment proto.InternalMessageInfo

func (m *NoteFragment) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NoteFragment) GetDateCreated() *timestamp.Timestamp {
	if m != nil {
		return m.DateCreated
	}
	return nil
}

func (m *NoteFragment) GetNoteFragmentGuid() string {
	if m != nil {
		return m.NoteFragmentGuid
	}
	return ""
}

func (m *NoteFragment) GetNoteGuid() string {
	if m != nil {
		return m.NoteGuid
	}
	return ""
}

func (m *NoteFragment) GetIssueGuid() string {
	if m != nil {
		return m.IssueGuid
	}
	return ""
}

func (m *NoteFragment) GetIcd_10Code() string {
	if m != nil {
		return m.Icd_10Code
	}
	return ""
}

func (m *NoteFragment) GetIcd_10Long() string {
	if m != nil {
		return m.Icd_10Long
	}
	return ""
}

func (m *NoteFragment) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *NoteFragment) GetStatus() RecordStatus {
	if m != nil {
		return m.Status
	}
	return RecordStatus_NO_STATUS
}

func (m *NoteFragment) GetPriority() RecordPriority {
	if m != nil {
		return m.Priority
	}
	return RecordPriority_NO_PRIORITY
}

func (m *NoteFragment) GetTopic() FragmentType {
	if m != nil {
		return m.Topic
	}
	return FragmentType_NO_TOPIC
}

func (m *NoteFragment) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *NoteFragment) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterType((*Note)(nil), "ehr.note.Note")
	proto.RegisterType((*NoteFragment)(nil), "ehr.note.NoteFragment")
	proto.RegisterEnum("ehr.note.NoteType", NoteType_name, NoteType_value)
	proto.RegisterEnum("ehr.note.FragmentType", FragmentType_name, FragmentType_value)
	proto.RegisterEnum("ehr.note.RecordPriority", RecordPriority_name, RecordPriority_value)
	proto.RegisterEnum("ehr.note.RecordStatus", RecordStatus_name, RecordStatus_value)
}

func init() { proto.RegisterFile("note.proto", fileDescriptor_note_2a00892bb07982f0) }

var fileDescriptor_note_2a00892bb07982f0 = []byte{
	// 839 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x4d, 0x6f, 0xe3, 0x36,
	0x10, 0x5d, 0xf9, 0x5b, 0x23, 0xc7, 0xcb, 0xe5, 0xb6, 0x85, 0x90, 0x7e, 0xac, 0xbb, 0x87, 0xc2,
	0x08, 0x16, 0xde, 0x8f, 0xf6, 0x5a, 0xa0, 0x8a, 0x4c, 0xc7, 0x6a, 0x65, 0x51, 0xa0, 0xe8, 0xa4,
	0xee, 0x85, 0x70, 0x2c, 0xae, 0x23, 0x20, 0xb1, 0x0c, 0x89, 0x2e, 0x90, 0xff, 0xd4, 0x3f, 0x56,
	0xf4, 0x07, 0xf4, 0x5a, 0x90, 0xb2, 0x13, 0x6d, 0x7a, 0xe9, 0xa1, 0x37, 0x6b, 0xde, 0xe3, 0xbc,
	0x37, 0xf3, 0xc6, 0x00, 0xdb, 0x5c, 0xc9, 0xf1, 0xae, 0xc8, 0x55, 0x8e, 0x7b, 0xf2, 0xa6, 0x18,
	0xeb, 0xef, 0xd3, 0x57, 0x9b, 0x3c, 0xdf, 0xdc, 0xca, 0xb7, 0xa6, 0x7e, 0xbd, 0xff, 0xf8, 0x56,
	0x65, 0x77, 0xb2, 0x54, 0xab, 0xbb, 0x5d, 0x45, 0x3d, 0x7d, 0x79, 0x27, 0xd3, 0x6c, 0xbd, 0xba,
	0xcd, 0xca, 0x72, 0x2f, 0xcb, 0xaa, 0xf8, 0xfa, 0xef, 0x06, 0xb4, 0xa2, 0x5c, 0x49, 0x3c, 0x80,
	0x46, 0x96, 0xba, 0xd6, 0xd0, 0x1a, 0x35, 0x59, 0x23, 0x4b, 0xf1, 0x8f, 0xd0, 0x4f, 0x57, 0x4a,
	0x8a, 0x75, 0x21, 0x57, 0x4a, 0xa6, 0x6e, 0x63, 0x68, 0x8d, 0x9c, 0x0f, 0xa7, 0xe3, 0x4a, 0x65,
	0x7c, 0x54, 0x19, 0xf3, 0xa3, 0x0a, 0x73, 0x34, 0xdf, 0xaf, 0xe8, 0xf8, 0x4b, 0xb0, 0xb5, 0x2b,
	0xb1, 0xd9, 0x67, 0xa9, 0xdb, 0x1c, 0x5a, 0x23, 0x9b, 0xf5, 0x74, 0xe1, 0x62, 0x9f, 0xa5, 0xf8,
	0x6b, 0x80, 0xdf, 0xb3, 0x32, 0x53, 0x15, 0xda, 0x32, 0xa8, 0x6d, 0x2a, 0x06, 0x7e, 0x05, 0xce,
	0x6a, 0xaf, 0x6e, 0xf2, 0xa2, 0xc2, 0xdb, 0x06, 0x87, 0xaa, 0x64, 0x08, 0xdf, 0x42, 0x7f, 0xb7,
	0x52, 0x99, 0xdc, 0x1e, 0x3a, 0x74, 0x0c, 0xc3, 0x39, 0xd4, 0x0c, 0xe5, 0x3b, 0x68, 0xa9, 0xfb,
	0x9d, 0x74, 0xbb, 0x43, 0x6b, 0x34, 0xf8, 0x80, 0xc7, 0xc7, 0x35, 0x8d, 0xf5, 0xb0, 0xfc, 0x7e,
	0x27, 0x99, 0xc1, 0xf1, 0x18, 0x3a, 0xa5, 0x5a, 0xa9, 0x7d, 0xe9, 0xf6, 0x0c, 0xf3, 0x8b, 0x47,
	0x26, 0x93, 0xeb, 0xbc, 0x48, 0x13, 0x83, 0xb2, 0x03, 0x0b, 0xff, 0x00, 0xf6, 0xc7, 0x62, 0xb5,
	0xb9, 0x93, 0x5b, 0x55, 0xba, 0xf6, 0xb0, 0x39, 0x72, 0xea, 0x4f, 0x74, 0xf3, 0xe9, 0x01, 0x66,
	0x8f, 0x44, 0x8c, 0xa1, 0xa5, 0x56, 0x9b, 0xd2, 0x85, 0x61, 0x73, 0x64, 0x33, 0xf3, 0xfb, 0xf5,
	0x5f, 0x4d, 0xe8, 0xd7, 0xf9, 0xff, 0x77, 0x02, 0x6f, 0x00, 0x9b, 0x04, 0x8e, 0x2e, 0xea, 0x51,
	0xa0, 0x6d, 0x4d, 0xd8, 0xec, 0xeb, 0x93, 0xbc, 0x5a, 0xff, 0xce, 0xcb, 0x1c, 0x4d, 0x3d, 0x0f,
	0xdb, 0x54, 0x0c, 0xfc, 0x0d, 0x38, 0xd9, 0x3a, 0x15, 0xef, 0xdf, 0x89, 0x75, 0x9e, 0xca, 0x43,
	0x1a, 0x76, 0xb6, 0x4e, 0xdf, 0xbf, 0xf3, 0xf3, 0x54, 0xd6, 0xf0, 0xdb, 0x7c, 0xbb, 0x31, 0x91,
	0x1c, 0xf1, 0x30, 0xdf, 0x6e, 0xf0, 0x10, 0x9c, 0x54, 0x96, 0xeb, 0x22, 0xdb, 0xa9, 0x2c, 0xdf,
	0x9a, 0x20, 0x6c, 0x56, 0x2f, 0xd5, 0x52, 0xb2, 0xff, 0x63, 0x4a, 0xbd, 0x5d, 0x91, 0xe5, 0x45,
	0xa6, 0xee, 0x5d, 0x30, 0x2f, 0xdc, 0xa7, 0x2f, 0xe2, 0x03, 0xce, 0x1e, 0x98, 0xf8, 0x0d, 0xb4,
	0x55, 0xbe, 0xcb, 0xd6, 0xae, 0xf3, 0x54, 0xe4, 0xb8, 0x2a, 0x73, 0x38, 0x15, 0x09, 0xbb, 0xd0,
	0x5d, 0xe7, 0x5b, 0x25, 0xb7, 0xca, 0xed, 0x1b, 0xc7, 0xc7, 0xcf, 0x87, 0xb4, 0x4f, 0x1e, 0xd3,
	0x3e, 0xfb, 0xc3, 0x82, 0xde, 0xf1, 0xf4, 0x30, 0x82, 0x7e, 0x44, 0x45, 0x44, 0x39, 0x11, 0x7c,
	0x19, 0x13, 0xf4, 0x0c, 0x9f, 0x80, 0x3d, 0xa5, 0x61, 0x48, 0xaf, 0xc4, 0x22, 0x46, 0x16, 0x1e,
	0x00, 0xc4, 0x33, 0x1a, 0x11, 0xe1, 0x7b, 0x61, 0x88, 0x1a, 0x78, 0x08, 0x5f, 0xf9, 0x34, 0xe2,
	0x41, 0xb4, 0x20, 0x13, 0xe1, 0x7b, 0x8c, 0x88, 0x09, 0xf5, 0x17, 0x73, 0x12, 0x71, 0x8f, 0x07,
	0x34, 0x42, 0x2d, 0xec, 0xc2, 0x67, 0x8c, 0x4c, 0x83, 0x30, 0x7c, 0x82, 0xb4, 0x31, 0x40, 0x27,
	0x88, 0xb8, 0xf7, 0x0b, 0x41, 0x1d, 0x2d, 0x13, 0x33, 0xea, 0x93, 0xc9, 0x82, 0x11, 0xd4, 0xd5,
	0x8f, 0x66, 0x41, 0xc2, 0x29, 0x5b, 0x0a, 0x2f, 0x9a, 0x88, 0x78, 0xb6, 0x4c, 0x02, 0xdf, 0x0b,
	0x51, 0xef, 0xec, 0x4f, 0x0b, 0xfa, 0xf5, 0xa1, 0x71, 0x1f, 0x7a, 0x11, 0x15, 0x9c, 0xc6, 0x81,
	0x8f, 0x9e, 0x69, 0x7f, 0xc9, 0xe2, 0xfc, 0x67, 0xe2, 0xf3, 0xe0, 0x92, 0x20, 0x0b, 0x7f, 0x0e,
	0x2f, 0x18, 0xb9, 0x0c, 0xc8, 0x95, 0xa0, 0x53, 0x91, 0x2c, 0x13, 0x4e, 0xe6, 0x09, 0x6a, 0xe0,
	0x97, 0xf0, 0x7c, 0x4e, 0x26, 0xba, 0xa5, 0x38, 0xe8, 0xa0, 0xa6, 0xf6, 0xe0, 0x85, 0x21, 0x61,
	0x17, 0x01, 0x49, 0x50, 0x0b, 0x3f, 0x07, 0xa7, 0xe2, 0x68, 0xbb, 0x09, 0x6a, 0x63, 0x0c, 0x83,
	0xa9, 0x37, 0x0f, 0xc2, 0xe5, 0xc3, 0x9b, 0x8e, 0xae, 0x25, 0xd4, 0x0f, 0x6a, 0x7d, 0xba, 0x7a,
	0xae, 0xcb, 0x80, 0x7b, 0x61, 0x82, 0x7a, 0xf8, 0x05, 0x9c, 0x1c, 0xcd, 0x0b, 0xf2, 0xab, 0x37,
	0x47, 0xb6, 0xd6, 0x0e, 0xbd, 0x73, 0xca, 0x3c, 0x33, 0xde, 0xc4, 0xe3, 0x1e, 0x82, 0xba, 0xa1,
	0x98, 0xd1, 0xf3, 0x90, 0xcc, 0x91, 0x73, 0xf6, 0x13, 0x0c, 0x3e, 0x3d, 0x09, 0xed, 0x29, 0xa2,
	0x22, 0x66, 0x01, 0x65, 0x01, 0x5f, 0xa2, 0x67, 0xb8, 0x07, 0xad, 0x59, 0x70, 0x31, 0x43, 0x96,
	0x56, 0x8d, 0x28, 0x9b, 0x7b, 0x3a, 0x95, 0x2e, 0x34, 0x43, 0x7a, 0x85, 0x9a, 0x67, 0x1c, 0xfa,
	0xf5, 0x33, 0xd4, 0x23, 0x46, 0x54, 0x24, 0xdc, 0xe3, 0x8b, 0xa4, 0xda, 0x56, 0x10, 0xf9, 0x74,
	0x1e, 0x87, 0x84, 0x93, 0xaa, 0x87, 0x57, 0x6d, 0xae, 0xa1, 0xf7, 0xca, 0x48, 0x1c, 0x7a, 0x3e,
	0x99, 0xa0, 0x26, 0x76, 0xa0, 0x3b, 0x21, 0x9a, 0x35, 0x41, 0xad, 0xf3, 0xee, 0x6f, 0x6d, 0x79,
	0x53, 0xec, 0xae, 0xaf, 0x3b, 0xe6, 0xaf, 0xfe, 0xfd, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x61,
	0xa7, 0x1e, 0x6e, 0xf8, 0x05, 0x00, 0x00,
}
