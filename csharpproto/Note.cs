// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: note.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ehr.Note {

  /// <summary>Holder for reflection information generated from note.proto</summary>
  public static partial class NoteReflection {

    #region Descriptor
    /// <summary>File descriptor for note.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NoteReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgpub3RlLnByb3RvEghlaHIubm90ZRofZ29vZ2xlL3Byb3RvYnVmL3RpbWVz",
            "dGFtcC5wcm90bxoTbWVkaWNhbGlzc3Vlcy5wcm90byKZAgoETm90ZRIKCgJp",
            "ZBgBIAEoAxIwCgxkYXRlX2NyZWF0ZWQYAiABKAsyGi5nb29nbGUucHJvdG9i",
            "dWYuVGltZXN0YW1wEhEKCW5vdGVfZ3VpZBgDIAEoCRISCgp2aXNpdF9ndWlk",
            "GAQgASgJEhMKC2F1dGhvcl9ndWlkGAUgASgJEhQKDHBhdGllbnRfZ3VpZBgG",
            "IAEoCRIgCgR0eXBlGAcgASgOMhIuZWhyLm5vdGUuTm90ZVR5cGUSJgoGc3Rh",
            "dHVzGAggASgOMhYuZWhyLm5vdGUuUmVjb3JkU3RhdHVzEikKCWZyYWdtZW50",
            "cxgJIAMoCzIWLmVoci5ub3RlLk5vdGVGcmFnbWVudBIMCgR0YWdzGAogAygJ",
            "IugCCgxOb3RlRnJhZ21lbnQSCgoCaWQYASABKAMSMAoMZGF0ZV9jcmVhdGVk",
            "GAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIaChJub3RlX2Zy",
            "YWdtZW50X2d1aWQYAyABKAkSEQoJbm90ZV9ndWlkGAQgASgJEhIKCmlzc3Vl",
            "X2d1aWQYBSABKAkSEwoLaWNkXzEwX2NvZGUYBiABKAkSEwoLaWNkXzEwX2xv",
            "bmcYByABKAkSEwoLZGVzY3JpcHRpb24YCCABKAkSJgoGc3RhdHVzGAkgASgO",
            "MhYuZWhyLm5vdGUuUmVjb3JkU3RhdHVzEioKCHByaW9yaXR5GAogASgOMhgu",
            "ZWhyLm5vdGUuUmVjb3JkUHJpb3JpdHkSJQoFdG9waWMYCyABKA4yFi5laHIu",
            "bm90ZS5GcmFnbWVudFR5cGUSDwoHY29udGVudBgMIAEoCRIMCgR0YWdzGA0g",
            "AygJKqwBCghOb3RlVHlwZRIQCgxOT19OT1RFX1RZUEUQABINCglGT0xMT1df",
            "VVAQARIOCgpQSE9ORV9DQUxMEAISIAocQ09OVElOVUVEX0NBUkVfRE9DVU1F",
            "TlRBVElPThAEEhgKFFJFRklMTF9ET0NVTUVOVEFUSU9OEAUSCgoGSU5UQUtF",
            "EAYSDQoJUFJPQ0VEVVJFEAcSGAoUSElTVE9SWV9BTkRfUEhZU0lDQUwQCCrp",
            "AQoMRnJhZ21lbnRUeXBlEgwKCE5PX1RPUElDEAASDgoKU1VCSkVDVElWRRAB",
            "EhUKEVJFVklFV19PRl9TWVNURU1TEAISEwoPTUVESUNBTF9ISVNUT1JZEAMS",
            "DQoJQUxMRVJHSUVTEAQSDwoLTUVESUNBVElPTlMQBRISCg5GQU1JTFlfSElT",
            "VE9SWRAGEhIKDlNPQ0lBTF9ISVNUT1JZEAcSCgoGVklUQUxTEAgSEQoNUEhZ",
            "U0lDQUxfRVhBTRAJEhMKD0xBQk9SQVRPUllfREFUQRAKEhMKD01FRElDQUxf",
            "UFJPQkxFTRALKkAKDlJlY29yZFByaW9yaXR5Eg8KC05PX1BSSU9SSVRZEAAS",
            "CAoESElHSBABEgoKBk5PUk1BTBACEgcKA0xPVxADKlQKDFJlY29yZFN0YXR1",
            "cxINCglOT19TVEFUVVMQABIOCgpJTkNPTVBMRVRFEAESCgoGQUNUSVZFEAIS",
            "DAoIUkVQTEFDRUQQAxILCgdERUxFVEVEEARCB1oFZWhycGJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Ehr.Medicalissues.MedicalissuesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Ehr.Note.NoteType), typeof(global::Ehr.Note.FragmentType), typeof(global::Ehr.Note.RecordPriority), typeof(global::Ehr.Note.RecordStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ehr.Note.Note), global::Ehr.Note.Note.Parser, new[]{ "Id", "DateCreated", "NoteGuid", "VisitGuid", "AuthorGuid", "PatientGuid", "Type", "Status", "Fragments", "Tags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ehr.Note.NoteFragment), global::Ehr.Note.NoteFragment.Parser, new[]{ "Id", "DateCreated", "NoteFragmentGuid", "NoteGuid", "IssueGuid", "Icd10Code", "Icd10Long", "Description", "Status", "Priority", "Topic", "Content", "Tags" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum NoteType {
    [pbr::OriginalName("NO_NOTE_TYPE")] NoNoteType = 0,
    [pbr::OriginalName("FOLLOW_UP")] FollowUp = 1,
    [pbr::OriginalName("PHONE_CALL")] PhoneCall = 2,
    [pbr::OriginalName("CONTINUED_CARE_DOCUMENTATION")] ContinuedCareDocumentation = 4,
    [pbr::OriginalName("REFILL_DOCUMENTATION")] RefillDocumentation = 5,
    [pbr::OriginalName("INTAKE")] Intake = 6,
    [pbr::OriginalName("PROCEDURE")] Procedure = 7,
    [pbr::OriginalName("HISTORY_AND_PHYSICAL")] HistoryAndPhysical = 8,
  }

  public enum FragmentType {
    [pbr::OriginalName("NO_TOPIC")] NoTopic = 0,
    [pbr::OriginalName("SUBJECTIVE")] Subjective = 1,
    [pbr::OriginalName("REVIEW_OF_SYSTEMS")] ReviewOfSystems = 2,
    [pbr::OriginalName("MEDICAL_HISTORY")] MedicalHistory = 3,
    [pbr::OriginalName("ALLERGIES")] Allergies = 4,
    [pbr::OriginalName("MEDICATIONS")] Medications = 5,
    [pbr::OriginalName("FAMILY_HISTORY")] FamilyHistory = 6,
    [pbr::OriginalName("SOCIAL_HISTORY")] SocialHistory = 7,
    [pbr::OriginalName("VITALS")] Vitals = 8,
    [pbr::OriginalName("PHYSICAL_EXAM")] PhysicalExam = 9,
    [pbr::OriginalName("LABORATORY_DATA")] LaboratoryData = 10,
    [pbr::OriginalName("MEDICAL_PROBLEM")] MedicalProblem = 11,
  }

  public enum RecordPriority {
    [pbr::OriginalName("NO_PRIORITY")] NoPriority = 0,
    [pbr::OriginalName("HIGH")] High = 1,
    [pbr::OriginalName("NORMAL")] Normal = 2,
    [pbr::OriginalName("LOW")] Low = 3,
  }

  public enum RecordStatus {
    [pbr::OriginalName("NO_STATUS")] NoStatus = 0,
    [pbr::OriginalName("INCOMPLETE")] Incomplete = 1,
    [pbr::OriginalName("ACTIVE")] Active = 2,
    [pbr::OriginalName("REPLACED")] Replaced = 3,
    [pbr::OriginalName("DELETED")] Deleted = 4,
  }

  #endregion

  #region Messages
  public sealed partial class Note : pb::IMessage<Note> {
    private static readonly pb::MessageParser<Note> _parser = new pb::MessageParser<Note>(() => new Note());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Note> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ehr.Note.NoteReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Note() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Note(Note other) : this() {
      id_ = other.id_;
      dateCreated_ = other.dateCreated_ != null ? other.dateCreated_.Clone() : null;
      noteGuid_ = other.noteGuid_;
      visitGuid_ = other.visitGuid_;
      authorGuid_ = other.authorGuid_;
      patientGuid_ = other.patientGuid_;
      type_ = other.type_;
      status_ = other.status_;
      fragments_ = other.fragments_.Clone();
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Note Clone() {
      return new Note(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "date_created" field.</summary>
    public const int DateCreatedFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp dateCreated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp DateCreated {
      get { return dateCreated_; }
      set {
        dateCreated_ = value;
      }
    }

    /// <summary>Field number for the "note_guid" field.</summary>
    public const int NoteGuidFieldNumber = 3;
    private string noteGuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NoteGuid {
      get { return noteGuid_; }
      set {
        noteGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "visit_guid" field.</summary>
    public const int VisitGuidFieldNumber = 4;
    private string visitGuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VisitGuid {
      get { return visitGuid_; }
      set {
        visitGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "author_guid" field.</summary>
    public const int AuthorGuidFieldNumber = 5;
    private string authorGuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthorGuid {
      get { return authorGuid_; }
      set {
        authorGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "patient_guid" field.</summary>
    public const int PatientGuidFieldNumber = 6;
    private string patientGuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatientGuid {
      get { return patientGuid_; }
      set {
        patientGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 7;
    private global::Ehr.Note.NoteType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ehr.Note.NoteType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 8;
    private global::Ehr.Note.RecordStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ehr.Note.RecordStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "fragments" field.</summary>
    public const int FragmentsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Ehr.Note.NoteFragment> _repeated_fragments_codec
        = pb::FieldCodec.ForMessage(74, global::Ehr.Note.NoteFragment.Parser);
    private readonly pbc::RepeatedField<global::Ehr.Note.NoteFragment> fragments_ = new pbc::RepeatedField<global::Ehr.Note.NoteFragment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ehr.Note.NoteFragment> Fragments {
      get { return fragments_; }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Note);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Note other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(DateCreated, other.DateCreated)) return false;
      if (NoteGuid != other.NoteGuid) return false;
      if (VisitGuid != other.VisitGuid) return false;
      if (AuthorGuid != other.AuthorGuid) return false;
      if (PatientGuid != other.PatientGuid) return false;
      if (Type != other.Type) return false;
      if (Status != other.Status) return false;
      if(!fragments_.Equals(other.fragments_)) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (dateCreated_ != null) hash ^= DateCreated.GetHashCode();
      if (NoteGuid.Length != 0) hash ^= NoteGuid.GetHashCode();
      if (VisitGuid.Length != 0) hash ^= VisitGuid.GetHashCode();
      if (AuthorGuid.Length != 0) hash ^= AuthorGuid.GetHashCode();
      if (PatientGuid.Length != 0) hash ^= PatientGuid.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= fragments_.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (dateCreated_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DateCreated);
      }
      if (NoteGuid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NoteGuid);
      }
      if (VisitGuid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(VisitGuid);
      }
      if (AuthorGuid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AuthorGuid);
      }
      if (PatientGuid.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PatientGuid);
      }
      if (Type != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Type);
      }
      if (Status != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Status);
      }
      fragments_.WriteTo(output, _repeated_fragments_codec);
      tags_.WriteTo(output, _repeated_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (dateCreated_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DateCreated);
      }
      if (NoteGuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NoteGuid);
      }
      if (VisitGuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VisitGuid);
      }
      if (AuthorGuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthorGuid);
      }
      if (PatientGuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatientGuid);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += fragments_.CalculateSize(_repeated_fragments_codec);
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Note other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.dateCreated_ != null) {
        if (dateCreated_ == null) {
          dateCreated_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        DateCreated.MergeFrom(other.DateCreated);
      }
      if (other.NoteGuid.Length != 0) {
        NoteGuid = other.NoteGuid;
      }
      if (other.VisitGuid.Length != 0) {
        VisitGuid = other.VisitGuid;
      }
      if (other.AuthorGuid.Length != 0) {
        AuthorGuid = other.AuthorGuid;
      }
      if (other.PatientGuid.Length != 0) {
        PatientGuid = other.PatientGuid;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      fragments_.Add(other.fragments_);
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            if (dateCreated_ == null) {
              dateCreated_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(dateCreated_);
            break;
          }
          case 26: {
            NoteGuid = input.ReadString();
            break;
          }
          case 34: {
            VisitGuid = input.ReadString();
            break;
          }
          case 42: {
            AuthorGuid = input.ReadString();
            break;
          }
          case 50: {
            PatientGuid = input.ReadString();
            break;
          }
          case 56: {
            type_ = (global::Ehr.Note.NoteType) input.ReadEnum();
            break;
          }
          case 64: {
            status_ = (global::Ehr.Note.RecordStatus) input.ReadEnum();
            break;
          }
          case 74: {
            fragments_.AddEntriesFrom(input, _repeated_fragments_codec);
            break;
          }
          case 82: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NoteFragment : pb::IMessage<NoteFragment> {
    private static readonly pb::MessageParser<NoteFragment> _parser = new pb::MessageParser<NoteFragment>(() => new NoteFragment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NoteFragment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ehr.Note.NoteReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoteFragment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoteFragment(NoteFragment other) : this() {
      id_ = other.id_;
      dateCreated_ = other.dateCreated_ != null ? other.dateCreated_.Clone() : null;
      noteFragmentGuid_ = other.noteFragmentGuid_;
      noteGuid_ = other.noteGuid_;
      issueGuid_ = other.issueGuid_;
      icd10Code_ = other.icd10Code_;
      icd10Long_ = other.icd10Long_;
      description_ = other.description_;
      status_ = other.status_;
      priority_ = other.priority_;
      topic_ = other.topic_;
      content_ = other.content_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NoteFragment Clone() {
      return new NoteFragment(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "date_created" field.</summary>
    public const int DateCreatedFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp dateCreated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp DateCreated {
      get { return dateCreated_; }
      set {
        dateCreated_ = value;
      }
    }

    /// <summary>Field number for the "note_fragment_guid" field.</summary>
    public const int NoteFragmentGuidFieldNumber = 3;
    private string noteFragmentGuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NoteFragmentGuid {
      get { return noteFragmentGuid_; }
      set {
        noteFragmentGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "note_guid" field.</summary>
    public const int NoteGuidFieldNumber = 4;
    private string noteGuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NoteGuid {
      get { return noteGuid_; }
      set {
        noteGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "issue_guid" field.</summary>
    public const int IssueGuidFieldNumber = 5;
    private string issueGuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IssueGuid {
      get { return issueGuid_; }
      set {
        issueGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icd_10_code" field.</summary>
    public const int Icd10CodeFieldNumber = 6;
    private string icd10Code_ = "";
    /// <summary>
    /// recommend using watson api to determine from description
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icd10Code {
      get { return icd10Code_; }
      set {
        icd10Code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icd_10_long" field.</summary>
    public const int Icd10LongFieldNumber = 7;
    private string icd10Long_ = "";
    /// <summary>
    /// recommend using watson api to determine from description
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icd10Long {
      get { return icd10Long_; }
      set {
        icd10Long_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 8;
    private string description_ = "";
    /// <summary>
    /// free text, human readable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 9;
    private global::Ehr.Note.RecordStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ehr.Note.RecordStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 10;
    private global::Ehr.Note.RecordPriority priority_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ehr.Note.RecordPriority Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "topic" field.</summary>
    public const int TopicFieldNumber = 11;
    private global::Ehr.Note.FragmentType topic_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ehr.Note.FragmentType Topic {
      get { return topic_; }
      set {
        topic_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 12;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 13;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(106);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NoteFragment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NoteFragment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(DateCreated, other.DateCreated)) return false;
      if (NoteFragmentGuid != other.NoteFragmentGuid) return false;
      if (NoteGuid != other.NoteGuid) return false;
      if (IssueGuid != other.IssueGuid) return false;
      if (Icd10Code != other.Icd10Code) return false;
      if (Icd10Long != other.Icd10Long) return false;
      if (Description != other.Description) return false;
      if (Status != other.Status) return false;
      if (Priority != other.Priority) return false;
      if (Topic != other.Topic) return false;
      if (Content != other.Content) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (dateCreated_ != null) hash ^= DateCreated.GetHashCode();
      if (NoteFragmentGuid.Length != 0) hash ^= NoteFragmentGuid.GetHashCode();
      if (NoteGuid.Length != 0) hash ^= NoteGuid.GetHashCode();
      if (IssueGuid.Length != 0) hash ^= IssueGuid.GetHashCode();
      if (Icd10Code.Length != 0) hash ^= Icd10Code.GetHashCode();
      if (Icd10Long.Length != 0) hash ^= Icd10Long.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (Topic != 0) hash ^= Topic.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (dateCreated_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DateCreated);
      }
      if (NoteFragmentGuid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NoteFragmentGuid);
      }
      if (NoteGuid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NoteGuid);
      }
      if (IssueGuid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(IssueGuid);
      }
      if (Icd10Code.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Icd10Code);
      }
      if (Icd10Long.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Icd10Long);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Description);
      }
      if (Status != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Status);
      }
      if (Priority != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Priority);
      }
      if (Topic != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Topic);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Content);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (dateCreated_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DateCreated);
      }
      if (NoteFragmentGuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NoteFragmentGuid);
      }
      if (NoteGuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NoteGuid);
      }
      if (IssueGuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IssueGuid);
      }
      if (Icd10Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icd10Code);
      }
      if (Icd10Long.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icd10Long);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Priority);
      }
      if (Topic != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Topic);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NoteFragment other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.dateCreated_ != null) {
        if (dateCreated_ == null) {
          dateCreated_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        DateCreated.MergeFrom(other.DateCreated);
      }
      if (other.NoteFragmentGuid.Length != 0) {
        NoteFragmentGuid = other.NoteFragmentGuid;
      }
      if (other.NoteGuid.Length != 0) {
        NoteGuid = other.NoteGuid;
      }
      if (other.IssueGuid.Length != 0) {
        IssueGuid = other.IssueGuid;
      }
      if (other.Icd10Code.Length != 0) {
        Icd10Code = other.Icd10Code;
      }
      if (other.Icd10Long.Length != 0) {
        Icd10Long = other.Icd10Long;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.Topic != 0) {
        Topic = other.Topic;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            if (dateCreated_ == null) {
              dateCreated_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(dateCreated_);
            break;
          }
          case 26: {
            NoteFragmentGuid = input.ReadString();
            break;
          }
          case 34: {
            NoteGuid = input.ReadString();
            break;
          }
          case 42: {
            IssueGuid = input.ReadString();
            break;
          }
          case 50: {
            Icd10Code = input.ReadString();
            break;
          }
          case 58: {
            Icd10Long = input.ReadString();
            break;
          }
          case 66: {
            Description = input.ReadString();
            break;
          }
          case 72: {
            status_ = (global::Ehr.Note.RecordStatus) input.ReadEnum();
            break;
          }
          case 80: {
            priority_ = (global::Ehr.Note.RecordPriority) input.ReadEnum();
            break;
          }
          case 88: {
            topic_ = (global::Ehr.Note.FragmentType) input.ReadEnum();
            break;
          }
          case 98: {
            Content = input.ReadString();
            break;
          }
          case 106: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
