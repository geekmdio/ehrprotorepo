// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: noteservice.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Noteservice.pbobjc.h"
#import "Note.pbobjc.h"
#import "HTTP.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - NoteserviceRoot

@implementation NoteserviceRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - NoteserviceRoot_FileDescriptor

static GPBFileDescriptor *NoteserviceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"ehr.noteservice"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - NoteServiceResponseStatus

@implementation NoteServiceResponseStatus

@dynamic HTTPCode;
@dynamic message;

typedef struct NoteServiceResponseStatus__storage_ {
  uint32_t _has_storage_[1];
  StatusCodes HTTPCode;
  NSString *message;
} NoteServiceResponseStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "HTTPCode",
        .dataTypeSpecific.enumDescFunc = StatusCodes_EnumDescriptor,
        .number = NoteServiceResponseStatus_FieldNumber_HTTPCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NoteServiceResponseStatus__storage_, HTTPCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = NoteServiceResponseStatus_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NoteServiceResponseStatus__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NoteServiceResponseStatus class]
                                     rootClass:[NoteserviceRoot class]
                                          file:NoteserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NoteServiceResponseStatus__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001!!!!\244\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t NoteServiceResponseStatus_HTTPCode_RawValue(NoteServiceResponseStatus *message) {
  GPBDescriptor *descriptor = [NoteServiceResponseStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NoteServiceResponseStatus_FieldNumber_HTTPCode];
  return GPBGetMessageInt32Field(message, field);
}

void SetNoteServiceResponseStatus_HTTPCode_RawValue(NoteServiceResponseStatus *message, int32_t value) {
  GPBDescriptor *descriptor = [NoteServiceResponseStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NoteServiceResponseStatus_FieldNumber_HTTPCode];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - CreateNoteRequest

@implementation CreateNoteRequest

@dynamic hasNote, note;

typedef struct CreateNoteRequest__storage_ {
  uint32_t _has_storage_[1];
  Note *note;
} CreateNoteRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "note",
        .dataTypeSpecific.className = GPBStringifySymbol(Note),
        .number = CreateNoteRequest_FieldNumber_Note,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateNoteRequest__storage_, note),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateNoteRequest class]
                                     rootClass:[NoteserviceRoot class]
                                          file:NoteserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateNoteRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateNoteResponse

@implementation CreateNoteResponse

@dynamic hasStatus, status;
@dynamic hasNote, note;

typedef struct CreateNoteResponse__storage_ {
  uint32_t _has_storage_[1];
  NoteServiceResponseStatus *status;
  Note *note;
} CreateNoteResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(NoteServiceResponseStatus),
        .number = CreateNoteResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateNoteResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "note",
        .dataTypeSpecific.className = GPBStringifySymbol(Note),
        .number = CreateNoteResponse_FieldNumber_Note,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateNoteResponse__storage_, note),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateNoteResponse class]
                                     rootClass:[NoteserviceRoot class]
                                          file:NoteserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateNoteResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteNoteRequest

@implementation DeleteNoteRequest

@dynamic id_p;

typedef struct DeleteNoteRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
} DeleteNoteRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = DeleteNoteRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeleteNoteRequest__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteNoteRequest class]
                                     rootClass:[NoteserviceRoot class]
                                          file:NoteserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteNoteRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteNoteResponse

@implementation DeleteNoteResponse

@dynamic hasStatus, status;

typedef struct DeleteNoteResponse__storage_ {
  uint32_t _has_storage_[1];
  NoteServiceResponseStatus *status;
} DeleteNoteResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(NoteServiceResponseStatus),
        .number = DeleteNoteResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeleteNoteResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteNoteResponse class]
                                     rootClass:[NoteserviceRoot class]
                                          file:NoteserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteNoteResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RetrieveNoteRequest

@implementation RetrieveNoteRequest

@dynamic id_p;

typedef struct RetrieveNoteRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
} RetrieveNoteRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = RetrieveNoteRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RetrieveNoteRequest__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RetrieveNoteRequest class]
                                     rootClass:[NoteserviceRoot class]
                                          file:NoteserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RetrieveNoteRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RetrieveNoteResponse

@implementation RetrieveNoteResponse

@dynamic hasStatus, status;
@dynamic hasNote, note;

typedef struct RetrieveNoteResponse__storage_ {
  uint32_t _has_storage_[1];
  NoteServiceResponseStatus *status;
  Note *note;
} RetrieveNoteResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(NoteServiceResponseStatus),
        .number = RetrieveNoteResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RetrieveNoteResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "note",
        .dataTypeSpecific.className = GPBStringifySymbol(Note),
        .number = RetrieveNoteResponse_FieldNumber_Note,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RetrieveNoteResponse__storage_, note),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RetrieveNoteResponse class]
                                     rootClass:[NoteserviceRoot class]
                                          file:NoteserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RetrieveNoteResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FindNoteRequest

@implementation FindNoteRequest

@dynamic searchTerms;
@dynamic authorGuid;
@dynamic patientGuid;
@dynamic visitGuid;

typedef struct FindNoteRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *searchTerms;
  NSString *authorGuid;
  NSString *patientGuid;
  NSString *visitGuid;
} FindNoteRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "searchTerms",
        .dataTypeSpecific.className = NULL,
        .number = FindNoteRequest_FieldNumber_SearchTerms,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FindNoteRequest__storage_, searchTerms),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "authorGuid",
        .dataTypeSpecific.className = NULL,
        .number = FindNoteRequest_FieldNumber_AuthorGuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FindNoteRequest__storage_, authorGuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "patientGuid",
        .dataTypeSpecific.className = NULL,
        .number = FindNoteRequest_FieldNumber_PatientGuid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FindNoteRequest__storage_, patientGuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "visitGuid",
        .dataTypeSpecific.className = NULL,
        .number = FindNoteRequest_FieldNumber_VisitGuid,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FindNoteRequest__storage_, visitGuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FindNoteRequest class]
                                     rootClass:[NoteserviceRoot class]
                                          file:NoteserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FindNoteRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FindNoteResponse

@implementation FindNoteResponse

@dynamic hasStatus, status;
@dynamic noteArray, noteArray_Count;

typedef struct FindNoteResponse__storage_ {
  uint32_t _has_storage_[1];
  NoteServiceResponseStatus *status;
  NSMutableArray *noteArray;
} FindNoteResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(NoteServiceResponseStatus),
        .number = FindNoteResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FindNoteResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "noteArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Note),
        .number = FindNoteResponse_FieldNumber_NoteArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FindNoteResponse__storage_, noteArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FindNoteResponse class]
                                     rootClass:[NoteserviceRoot class]
                                          file:NoteserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FindNoteResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateNoteRequest

@implementation UpdateNoteRequest

@dynamic id_p;
@dynamic hasNote, note;

typedef struct UpdateNoteRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t id_p;
  Note *note;
} UpdateNoteRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = UpdateNoteRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateNoteRequest__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "note",
        .dataTypeSpecific.className = GPBStringifySymbol(Note),
        .number = UpdateNoteRequest_FieldNumber_Note,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateNoteRequest__storage_, note),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateNoteRequest class]
                                     rootClass:[NoteserviceRoot class]
                                          file:NoteserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateNoteRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateNoteResponse

@implementation UpdateNoteResponse

@dynamic hasStatus, status;

typedef struct UpdateNoteResponse__storage_ {
  uint32_t _has_storage_[1];
  NoteServiceResponseStatus *status;
} UpdateNoteResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(NoteServiceResponseStatus),
        .number = UpdateNoteResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateNoteResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateNoteResponse class]
                                     rootClass:[NoteserviceRoot class]
                                          file:NoteserviceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateNoteResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
